@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@using System.Timers
@using Microsoft.AspNetCore.Components.Routing
@using AssetManagement.UI.Auth

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://github.com/Aksoni07/Asset-Management-Project" target="_blank">About</a>
            <button class="btn btn-link ms-auto" @onclick="HandleLogout">Logout</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        await CheckUserIsAuthenticated();

        // Subscribe to navigation events to detect user activity
        Navigation.LocationChanged += OnLocationChanged;

        _timer = new Timer(30 * 1000); // 30 seconds
        _timer.Elapsed += async (sender, e) => await CheckSession();
        _timer.Start();
    }

    // This method is called every time the user clicks a link
    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
        await customAuthStateProvider.RefreshSessionExpiration();
    }

    private async Task CheckUserIsAuthenticated()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User?.Identity?.IsAuthenticated == false)
        {
            var uri = new Uri(Navigation.Uri);
            if (uri.AbsolutePath != "/login")
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task CheckSession()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User?.Identity?.IsAuthenticated == false)
        {
            await InvokeAsync(() =>
            {
                var uri = new Uri(Navigation.Uri);
                if (uri.AbsolutePath != "/login")
                {
                    _timer?.Stop();
                    Navigation.NavigateTo("/login");
                }
            });
        }
    }

    private async Task HandleLogout()
    {
        var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
        await customAuthStateProvider.Logout();
        Navigation.NavigateTo("/login");
    }

    public void Dispose()
    {
        // Unsubscribe from events to prevent memory leaks
        Navigation.LocationChanged -= OnLocationChanged;
        _timer?.Dispose();
    }
}