@page "/"
@using AssetManagement.Core 
@using AssetManagement.Core.Entities
@using AssetManagement.BusinessLogic.Services
@using AssetManagement.UI.Services
@inject IDashboardService DashboardService
@inject IAssetService AssetService
@inject IEmployeeService EmployeeService
@inject CsvExportService CsvService
@inject IJSRuntime JSRuntime 
<!-- Blazor's built in service for calling JS funcns: trigger the file download-->

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                        Total Assets</div>
                    <div class="h5 mb-0 font-weight-bold text-gray-800">@totalAssets</div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <div class="col-xl-3 col-md-6 mb-4"><div class="card border-left-success shadow h-100 py-2"><div class="card-body"><div class="row no-gutters align-items-center"><div class="col mr-2"><div class="text-xs font-weight-bold text-success text-uppercase mb-1">Available</div><div class="h5 mb-0 font-weight-bold text-gray-800">@availableAssets</div></div></div></div></div></div>
    <div class="col-xl-3 col-md-6 mb-4"><div class="card border-left-info shadow h-100 py-2"><div class="card-body"><div class="row no-gutters align-items-center"><div class="col mr-2"><div class="text-xs font-weight-bold text-info text-uppercase mb-1">Assigned</div><div class="h5 mb-0 font-weight-bold text-gray-800">@assignedAssets</div></div></div></div></div></div>
    <div class="col-xl-3 col-md-6 mb-4"><div class="card border-left-warning shadow h-100 py-2"><div class="card-body"><div class="row no-gutters align-items-center"><div class="col mr-2"><div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Under Repair</div>
    <div class="h5 mb-0 font-weight-bold text-gray-800">@underRepairAssets</div></div></div></div></div></div>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">Asset Inventory</h6>
        <button class="btn btn-sm btn-success" @onclick="ExportToCsv">Export to CSV</button>
    </div>

    <div class="card-body">
        <div class="row mb-3 gx-2">
            <div class="col-md-3"><InputText class="form-control" @bind-Value="serialFilter" placeholder="Filter by Serial #" /></div>
            <div class="col-md-2"><InputText class="form-control" @bind-Value="typeFilter" placeholder="Filter by Type" /></div>
            <div class="col-md-2">
                <InputSelect class="form-select" @bind-Value="statusFilter">
                    <option value="All">All Statuses</option>
                    <option value="Available">Available</option>
                    <option value="Assigned">Assigned</option>
                    <option value="Under Repair">Under Repair</option>
                    <option value="Retired">Retired</option>
                </InputSelect>
            </div>
            <div class="col-md-3">
                <InputSelect class="form-select" @bind-Value="employeeFilterId">
                    <option value="0">All Employees</option>
                    @foreach(var emp in employees)
                    {
                        <option value="@emp.EmployeeId">@emp.FullName</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-2"><button class="btn btn-primary w-100" @onclick="ApplyFilters">Filter</button></div>
        </div>

        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th @onclick='() => SortTable("Id")' style="cursor: pointer;">Asset ID @GetSortIcon("Id")</th>
                    <th @onclick='() => SortTable("Name")' style="cursor: pointer;">Name @GetSortIcon("Name")</th>
                    <th @onclick='() => SortTable("Type")' style="cursor: pointer;">Type @GetSortIcon("Type")</th>
                    <th @onclick='() => SortTable("Serial")' style="cursor: pointer;">Serial Number @GetSortIcon("Serial")</th>
                    <th @onclick='() => SortTable("Status")' style="cursor: pointer;">Status @GetSortIcon("Status")</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var asset in pagedAssets)
                {
                    <tr>
                        <td>@asset.AssetId</td>
                        <td>@asset.AssetName</td>
                        <td>@asset.AssetType</td>
                        <td>@asset.SerialNumber</td>
                        <td>@asset.Status</td>
                    </tr>
                }
            </tbody>
        </table>

        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">Page @currentPage of @totalPages</span>
                </li>
                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    private int totalAssets, assignedAssets, availableAssets, underRepairAssets;
    private List<Asset> pagedAssets = new List<Asset>();
    private IEnumerable<Employee> employees = new List<Employee>();

    private string serialFilter = "";
    private string statusFilter = "All";
    private string typeFilter = "";
    private int employeeFilterId = 0;

    private string currentSortBy = "Id"; // Default sort by ID
    private bool isSortAscending = true;

    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;
    private int totalAssetCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadWidgetData();
        await LoadEmployees();
        await ApplyFiltersAndSorting();
    }

    private async Task LoadWidgetData() { 
        totalAssets = await DashboardService.GetTotalAssetCountAsync();
        assignedAssets = await DashboardService.GetAssignedAssetCountAsync(); 
        availableAssets = await DashboardService.GetAvailableAssetsAsync(); 
        underRepairAssets = await DashboardService.GetUnderRepairAssetCountAsync(); 
    }

    private async Task LoadEmployees() { 
        employees = await EmployeeService.GetAllEmployeesAsync() ?? new List<Employee>(); 
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await ApplyFiltersAndSorting();
    }

    private async Task SortTable(string sortBy)
    {
        if (sortBy == currentSortBy) { isSortAscending = !isSortAscending; }
        else { currentSortBy = sortBy; isSortAscending = true; }

        await ApplyFiltersAndSorting();
    }

    private async Task GoToPage(int page)
    {
        if (page > 0 && page <= totalPages)
        {
            currentPage = page;
            await ApplyFiltersAndSorting();
        }
    }

    private async Task ApplyFiltersAndSorting()
    {
        var result = await AssetService.SearchAssetsAsync(serialFilter, statusFilter, typeFilter, employeeFilterId, currentPage, pageSize, currentSortBy, isSortAscending);
        pagedAssets = result.Items;
        totalAssetCount = result.TotalCount;
        totalPages = (int)Math.Ceiling(totalAssetCount / (double)pageSize);
        if (totalPages == 0) totalPages = 1;
        StateHasChanged();
    }

    private string GetSortIcon(string sortBy) { if (currentSortBy != sortBy) return "â†•"; return isSortAscending ? "ðŸ”¼" : "ðŸ”½"; }

    private async Task ExportToCsv()
    {
        // We need to fetch all filtered results for export, not just the current page
        var allFilteredAssets = await AssetService.SearchAssetsAsync(serialFilter, statusFilter, typeFilter, employeeFilterId, 1, totalAssetCount > 0 ? totalAssetCount : 1, currentSortBy, isSortAscending);
        var fileBytes = CsvService.ExportAssetsToCsv(allFilteredAssets.Items);
        var fileName = $"assets-export-{DateTime.Now:yyyy-MM-dd}.csv";
        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }
}