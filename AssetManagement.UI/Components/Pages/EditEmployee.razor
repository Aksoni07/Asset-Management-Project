@page "/employee/edit/{EmployeeId:int}"
@using AssetManagement.Core.Entities
@rendermode InteractiveServer
@using AssetManagement.BusinessLogic.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation

<PageTitle>Edit Employee</PageTitle>

<h1>Edit Employee</h1>

@if (employee == null)
{
    <p><em>Loading employee...</em></p>
}
else
{
    <EditForm Model="@employee" OnValidSubmit="HandleValidSubmit" FormName="EditEmployeeForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="fullName" class="form-label">Full Name</label>
            <InputText id="fullName" class="form-control" @bind-Value="employee.FullName" />
        </div>

        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputText id="department" class="form-control" @bind-Value="employee.Department" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="employee.Email" />
        </div>
        
        <div class="mb-3">
            <label for="phone" class="form-label">Phone Number</label>
            <InputText id="phone" class="form-control" @bind-Value="employee.PhoneNumber" />
        </div>

        <div class="mb-3">
            <label for="designation" class="form-label">Designation</label>
            <InputText id="designation" class="form-control" @bind-Value="employee.Designation" />
        </div>

        <div class="form-check mb-3">
            <InputCheckbox id="isActive" class="form-check-input" @bind-Value="employee.IsActive" />
            <label for="isActive" class="form-check-label">Is Active</label>
        </div>

        <button type="submit" class="btn btn-success">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int EmployeeId { get; set; }

    private Employee employee;

    protected override async Task OnInitializedAsync()
    {
        // Load the existing employee data when the page loads
        employee = await EmployeeService.GetEmployeeByIdAsync(EmployeeId);
    }

    private async Task HandleValidSubmit()
    {
        // Call the Update method instead of Add
        await EmployeeService.UpdateEmployeeAsync(employee);
        Navigation.NavigateTo("/employees");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/employees");
    }
}