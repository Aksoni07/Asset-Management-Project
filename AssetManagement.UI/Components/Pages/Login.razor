@page "/login"
@using AssetManagement.UI.Components.Layout
@layout LoginLayout
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous] 
@using System.ComponentModel.DataAnnotations
@using AssetManagement.UI.Auth
@inject NavigationManager Navigation
@inject IConfiguration Configuration 
<!-- read setting appsettings.json -->
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card mt-5">
                <div class="card-header">
                    <h4>Asset Management Login</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label>Username</label>
                            <InputText class="form-control" @bind-Value="loginModel.Username" />

                            <ValidationMessage For="() => loginModel.Username" />

                        </div>
                        
                        <div class="mb-3">
                            <label>Password</label>
                            <div class="input-group">
                                <InputText type="@(isPasswordVisible ? "text" : "password")" class="form-control" @bind-Value="loginModel.Password" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                    <span class="bi @(isPasswordVisible ? "bi-eye-slash-fill" : "bi-eye-fill")" aria-hidden="true"></span>
                                </button>
                            </div>

                            <ValidationMessage For="() => loginModel.Password" />

                        </div>

                        <button type="submit" class="btn btn-primary w-100">Log In</button>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new(); // to store data submitted from user
    private string errorMessage = string.Empty;
    private bool isPasswordVisible = false;

    private async Task HandleLogin()
    {
        var adminUser = Configuration.GetSection("AdminCredentials")["Username"];
        var adminPass = Configuration.GetSection("AdminCredentials")["Password"];

        if (loginModel.Username == adminUser && loginModel.Password == adminPass)
        {
            var userSession = new UserSession
            {
                UserName = loginModel.Username,
                ExpiryTimestamp = DateTime.UtcNow.AddMinutes(60)
            };
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
